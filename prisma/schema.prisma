// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("CORE_DATABASE_URL")
}

model Tenant {
  id           String  @id @default(cuid())
  tenantId     String  @unique
  name         String
  subdomain    String? @unique
  customDomain String? @unique @map("custom_domain")
  logo         String?
  background1  String?
  background2  String?
  background3  String?
  description  String? @db.Text
  activated    Boolean @default(false)
  theme        String? @default("purple")

  vnp_tmnCode    String? @map("vnp_tmn_code")
  vnp_hashSecret String? @map("vnp_hash_secret")

  members Member[]

  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  alumni    Alumni[]

  @@map("tenants")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String

  isTenantAdmin Boolean @default(false) @map("is_tenant_admin")

  members Member[]

  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  Alumni    Alumni[]

  @@map("users")
}

model Member {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  userId   String @map("user_id")

  accessStatus AccessStatus @default(PENDING) @map("access_status")
  accessLevel  AccessLevel  @default(ALUMNI) @map("access_level")
  accessMode   AccessMode   @default(FULL_ACCESS) @map("access_mode")

  isOwner Boolean @default(false) @map("is_owner")

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("members")
}

model Account {
  id       String @id @default(cuid())
  email    String @unique
  password String

  isTenantAdmin Boolean @default(false) @map("is_tenant_admin")

  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  alumni Alumni[]

  @@map("accounts")
}

model Alumni {
  id        String @id @default(cuid())
  tenantId  String @map("tenant_id")
  accountId String @map("user_id")

  accessLevel AccessLevel @default(ALUMNI) @map("access_level")
  firstLogin  DateTime?   @map("first_login")
  isOwner     Boolean     @default(false) @map("is_owner")

  tenant  Tenant  @relation(fields: [tenantId], references: [id])
  account Account @relation(fields: [accountId], references: [id])

  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("alumni")
}

enum AccessLevel {
  SCHOOL_ADMIN
  ALUMNI
  CLASS_MOD
  GRADE_MOD
}

enum AccessStatus {
  PENDING
  APPROVED
}

enum AccessMode {
  FULL_ACCESS
  READ_ONLY
}
